<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C on Ashwin Narayan</title>
    <link>https://www.ashwinnarayan.com/tags/c/</link>
    <description>Recent content in C on Ashwin Narayan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018 Ashwin Narayan</copyright>
    <lastBuildDate>Tue, 01 Aug 2017 00:15:14 +0800</lastBuildDate>
    
	<atom:link href="https://www.ashwinnarayan.com/tags/c/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Programming Complex Dataflows in C</title>
      <link>https://www.ashwinnarayan.com/post/dataflow-programming-in-c/</link>
      <pubDate>Tue, 01 Aug 2017 00:15:14 +0800</pubDate>
      
      <guid>https://www.ashwinnarayan.com/post/dataflow-programming-in-c/</guid>
      <description>Over the past few months I&amp;rsquo;ve been spending a lot of time on implementing various signal processing algorithms in C/C++. Things like Kalman Filters, various types of FIR filters and finite state machines. The number of steps needed to implement each these algorithms were fairly small and in the beginning I tried to put all the functionality of these implementations into simple to use C++ classes. This made things look neater and also fit in quite well with the Arduino programming framework (I was implementing a lot of these algorithms on Arduino compatible microcontrollers like the Teensy).</description>
    </item>
    
  </channel>
</rss>